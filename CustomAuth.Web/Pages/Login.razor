@page "/login"


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input class="form-control" placeholder="User Name" @bind-value="_userName" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input class="form-control" placeholder="Password" @bind-value="_password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button class="btn btn-primary" @onclick="Authenticate">Login</button>
        </div>
    </div>
</div>




@code {
    [Inject]
    IUserAccountService _userAccountService { get; set; }
    [Inject]
    IJSRuntime js { get; set; }
    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }
    private UserAccount _userModel = new UserAccount();
    public string _userName { get; set; }
    public string _password { get; set; }


    private async Task Authenticate()
    {
        _userModel = await _userAccountService
                                         .GetUserByUserNameAndPassword(_userName, _password);
        if(_userModel==null)
        {
            await js.InvokeVoidAsync("alert", "Invalid UserName or Password ,Please try again");
            return;
        }
        else
        {
            var auth = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await auth.UpdateAuthenticationState(new UserSession
                {
                    UserName = _userName,
                    Role = _password
                });
            navigationManager.NavigateTo("/", true);
        }
       

    }

}
